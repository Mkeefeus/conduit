{
  "name": "Energy Imbuement",
  "source": "TCP",
  "className": "Conduit",
  "classSource": "TCP",
  "level": 2,
  "flags": {
    "dae": {
      "macro": {
        "name": "Energy Imbuement",
        "img": "systems/dnd5e/icons/svg/items/feature.svg",
        "type": "script",
        "scope": "global",
        "command": "const { dialogUtils, genericUtils, effectUtils, combatUtils, actorUtils } = chrisPremades.utils;\nfunction deleteEffect(actor, id, useCPRFlag) {\n  if (useCPRFlag) {\n    return actor.appliedEffects.find((effect) => effect.flags['chris-premades'].info.identifier === id).delete();\n  } else {\n    return actor.appliedEffects.find((effect) => effect.name === id).delete();\n  }\n}\n\nfunction deleteEffectIfPresent(actor, id, useCPRFlag) {\n  if (effectUtils.getEffectByIdentifier(actor, id)) {\n    deleteEffect(actor, id, useCPRFlag);\n  }\n}\n\nif (!combatUtils.inCombat()) {\n  genericUtils.notify('You are not in combat', 'warn');\n  return;\n}\nif (!actorUtils.hasSpellSlots(workflow.actor)) {\n  genericUtils.notify('You do not have any spell slots available', 'warn');\n  return;\n}\nlet validTypes = ['acid', 'cold', 'fire', 'lightning', 'thunder'];\nlet buttons = validTypes.map((i) => [\n  CONFIG.DND5E.damageTypes[i].label,\n  Object.keys(CONFIG.DND5E.damageTypes).find((j) => j === i),\n]);\nif (!buttons.length) {\n  genericUtils.notify('No valid damage types found', 'warn');\n  return;\n}\nlet selection = await dialogUtils.buttonDialog(workflow.item.name, 'CHRISPREMADES.Dialog.DamageType', buttons);\nif (!selection) return;\nlet numDice = await dialogUtils.selectSpellSlot(\n  workflow.actor,\n  workflow.item.name,\n  genericUtils.format('CHRISPREMADES.Dialog.Use', { itemName: item.name }),\n  { no: true }\n);\nif (numDice === 'pact') {\n  await genericUtils.update(workflow.actor, {\n    'system.spells.pact.value': workflow.actor.system.spells.pact.value - 1,\n  });\n  numDice = workflow.actor.system.spells.pact.level;\n} else {\n  await genericUtils.update(workflow.actor, {\n    ['system.spells.spell' + numDice + '.value']: workflow.actor.system.spells['spell' + numDice].value - 1,\n  });\n}\n\nconst hasImproved = workflow.actor.items.find((i) => i.name === 'Improved Energy Imbuement');\nif (hasImproved) {\n  numDice = numDice * 2;\n}\n\nlet effectData = {\n  name: workflow.item.name + ' (' + CONFIG.DND5E.damageTypes[selection].label + ')',\n  img: workflow.item.img,\n  origin: workflow.item.uuid,\n  duration: {\n    seconds: 60,\n  },\n  changes: [\n    {\n      key: 'flags.midi-qol.optional.energyImbuement.damage.mwak',\n      mode: 5,\n      value: `${numDice}d4[${selection}]`,\n      priority: 20,\n    },\n    {\n      key: 'flags.midi-qol.optional.energyImbuement.damage.rwak',\n      mode: 5,\n      value: `${numDice}d4[${selection}]`,\n      priority: 20,\n    },\n    {\n      key: 'flags.midi-qol.optional.energyImbuement.count',\n      mode: 5,\n      value: 'each-turn',\n      priority: 20,\n    },\n  ],\n  flags: {\n    dae: {\n      disableIncapacitated: true,\n    },\n  },\n};\ndeleteEffectIfPresent(workflow.actor, 'energyImbuement', true);\nawait effectUtils.createEffect(workflow.actor, effectData, { identifier: 'energyImbuement' });\nwhile (combatUtils.inCombat()) {\n  await genericUtils.sleep(60000);\n}\ndeleteEffectIfPresent(workflow.actor, 'energyImbuement', true);"
      }
    },
    "midi-qol": {
      "onUseMacroName": "[postActiveEffects]ItemMacro"
    }
  }
}
