{
  "name": "Energy Imbuement",
  "source": "TCP",
  "className": "Conduit",
  "classSource": "TCP",
  "level": 2,
  "flags": {
    "dae": {
      "macro": {
        "name": "Energy Imbuement",
        "img": "systems/dnd5e/icons/svg/items/feature.svg",
        "type": "script",
        "scope": "global",
        "command": "const { dialogUtils, genericUtils, effectUtils, combatUtils, actorUtils } = chrisPremades.utils;\n\nfunction deleteEffectIfPresent(actor, id, useCPRFlag) {\n  console.log(`Energy Imbuement Macro | Checking for effect ${id} on ${actor.name}`);\n  let effect = null;\n  if (useCPRFlag) {\n    effect = actor.effects.find((effect) => effect.flags['chris-premades'].info.identifier === id);\n  } else {\n    effect = actor.effects.find((effect) => effect.name === id);\n  }\n  if (!effect) {\n    return;\n  }\n  console.log(`Energy Imbuement Macro | Deleting effect ${id} from ${actor.name}`);\n  effect.delete();\n}\n\nfunction generateRandomString(length) {\n  const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz';\n  let result = '';\n  for (let i = 0; i < length; i++) {\n    result += characters.charAt(Math.floor(Math.random() * characters.length));\n  }\n  return result;\n}\n\nif (!combatUtils.inCombat()) {\n  genericUtils.notify('Energy Imbuement Macro | You are not in combat', 'warn');\n  return;\n}\nif (!actorUtils.hasSpellSlots(workflow.actor)) {\n  genericUtils.notify('Energy Imbuement Macro | You do not have any spell slots available', 'warn');\n  return;\n}\nlet validTypes = ['acid', 'cold', 'fire', 'lightning', 'thunder'];\nlet die = ['d4', 'd6', 'd8', 'd10', 'd12'];\nlet buttons = validTypes.map((i) => [\n  CONFIG.DND5E.damageTypes[i].label,\n  Object.keys(CONFIG.DND5E.damageTypes).find((j) => j === i),\n]);\nif (!buttons.length) {\n  genericUtils.notify('Energy Imbuement Macro | No valid damage types found', 'warn');\n  return;\n}\nlet selection = await dialogUtils.buttonDialog(workflow.item.name, 'Select a damage type to imbue', buttons);\nif (!selection) return;\nconst hasLevelSeven = workflow.actor.classes.conduit.system.levels >= 7;\nlet drSelection;\nif (hasLevelSeven) {\n  drSelection = await dialogUtils.buttonDialog(workflow.item.name, 'Select a damage type to resist', buttons);\n  if (!drSelection) return;\n}\nlet slotUsed = await dialogUtils.selectSpellSlot(\n  workflow.actor,\n  workflow.item.name,\n  genericUtils.format('CHRISPREMADES.Dialog.Use', { itemName: item.name }),\n  { no: true }\n);\nif (slotUsed === 'pact') {\n  await genericUtils.update(workflow.actor, {\n    'system.spells.pact.value': workflow.actor.system.spells.pact.value - 1,\n  });\n  slotUsed = workflow.actor.system.spells.pact.level;\n} else {\n  await genericUtils.update(workflow.actor, {\n    ['system.spells.spell' + slotUsed + '.value']: workflow.actor.system.spells['spell' + slotUsed].value - 1,\n  });\n}\n\nconst randomString = generateRandomString(8);\nconst damageDie = die[slotUsed - 1];\n\nlet effectData = {\n  name: workflow.item.name + ' (' + CONFIG.DND5E.damageTypes[selection].label + ')',\n  img: workflow.item.img,\n  origin: workflow.item.uuid,\n  duration: {\n    seconds: 60,\n  },\n  changes: [\n    {\n      key: `flags.midi-qol.optional.energyImbuement_${randomString}.damage.mwak`,\n      mode: 5,\n      value: `1${damageDie}[${selection}]`,\n      priority: 20,\n    },\n    {\n      key: `flags.midi-qol.optional.energyImbuement_${randomString}.damage.rwak`,\n      mode: 5,\n      value: `1${damageDie}[${selection}]`,\n      priority: 20,\n    },\n    {\n      key: `flags.midi-qol.optional.energyImbuement_${randomString}.criticalDamage`,\n      mode: 5,\n      value: `1${damageDie}[${selection}]`,\n      priority: 20,\n    },\n    {\n      key: `flags.midi-qol.optional.energyImbuement_${randomString}.count`,\n      mode: 5,\n      value: 'every',\n      priority: 20,\n    },\n  ],\n  flags: {\n    dae: {\n      disableIncapacitated: true,\n    },\n  },\n};\n\nif (hasLevelSeven) {\n  effectData.changes.push({\n    key: `system.traits.dr.value`,\n    mode: 2,\n    value: `${drSelection}`,\n    priority: 20,\n  });\n}\n\ndeleteEffectIfPresent(workflow.item, 'energyImbuement', true);\nawait effectUtils.createEffect(workflow.item, effectData, { identifier: 'energyImbuement' });\nwhile (combatUtils.inCombat()) {\n  await genericUtils.sleep(20000);\n}\nconsole.log('Energy Imbuement Macro | Combat has ended, removing effect');\ndeleteEffectIfPresent(workflow.item, 'energyImbuement', true);\n"
      }
    },
    "midi-qol": {
      "onUseMacroName": "[postActiveEffects]ItemMacro"
    }
  }
}
